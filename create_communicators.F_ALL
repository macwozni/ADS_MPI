      subroutine create_communicators

      use communicators
      use parallelism

      implicit none

      include "mpif.h"

      integer :: group_comm_world
      integer :: iprint
      integer :: i1,i2,i3
      integer :: i,j,k
      integer :: irank
      integer :: ierr
      integer :: comm_myrank_local

      iprint=0
      if(MYRANK.eq.0)iprint=1
      if(iprint==1)then
        write(*,*)MYRANK,'NRPROC',NRPROC
      endif
      call mpi_comm_group(MPI_COMM_WORLD,group_comm_world,i1)
      if ((i1)/=0) then
        write(*,*)MYRANK,':',
     .  'main: error calling mpi_comm_group!'
        call abort
      endif
      if(iprint.eq.1)then
        write(*,*)MYRANK,'got group',group_comm_world
      endif
      call mpi_barrier(MPI_COMM_WORLD,ierr)
c  ...get the integer coordinates of the processor in the 3D box
c      call decompose(MYRANK,myrankx,myranky,myrankz) 
      do i=1,NRPROCX
        do j=1,NRPROCY
          do k=1,NRPROCZ
            processors(i,j,k)=(i-1)+(j-1)*NRPROCX+(k-1)*NRPROCX*NRPROCY
          enddo
        enddo
      enddo
      if(iprint.eq.1)then
        do i=1,NRPROCX
          do j=1,NRPROCY
            do k=1,NRPROCZ
              write(*,*)PRINTRANK,'processors(',i,j,k,')=',
     .          processors(i,j,k)
            enddo
          enddo
        enddo
      endif
      do i=1,NRPROCX
        do j=1,NRPROCY
          call mpi_group_incl(group_comm_world,NRPROCZ,
     .      processors(i,j,1:NRPROCZ),
     .      GROUPZ(i,j),i2)
          if ((i2)/=0) then
            write(*,*)MYRANK,':',
     .      'main: error calling mpi_group_incl for Z',i,j
            call abort
          endif
        enddo
      enddo
      do i=1,NRPROCX
        do k=1,NRPROCZ
          call mpi_group_incl(group_comm_world,NRPROCY,
     .      processors(i,1:NRPROCY,k),
     .      GROUPY(i,k),i2)
          if ((i2)/=0) then
            write(*,*)MYRANK,':',
     .      'main: error calling mpi_group_incl for Y',i,k
            call abort
          endif
        enddo
      enddo
      do j=1,NRPROCY
        do k=1,NRPROCZ
          call mpi_group_incl(group_comm_world,NRPROCX,
     .      processors(1:NRPROCX,j,k),
     .      GROUPX(j,k),i2)
          if ((i2)/=0) then
            write(*,*)MYRANK,':',
     .      'main: error calling mpi_group_incl for X',j,k
            call abort
          endif
        enddo
      enddo
      if(iprint.eq.1)then
        do i=1,NRPROCX
          do j=1,NRPROCY
            write(*,*)PRINTRANK,'GROUPZ(',i,j,')',GROUPZ(i,j)
          enddo     
        enddo
        do i=1,NRPROCX
          do k=1,NRPROCZ
            write(*,*)PRINTRANK,'GROUPY(',i,k,')',GROUPY(i,k)
          enddo     
        enddo
        do j=1,NRPROCY
          do k=1,NRPROCZ
            write(*,*)PRINTRANK,'GROUPX(',j,k,')',GROUPX(j,k)
          enddo     
        enddo
      endif
      call mpi_barrier(MPI_COMM_WORLD,ierr)
c  ...create the new communicators
      do i=1,NRPROCX
        do j=1,NRPROCY
          call mpi_comm_create(MPI_COMM_WORLD,GROUPZ(i,j),
     .       comm_myrank_local,i3)
          COMMZALL(i,j)=comm_myrank_local
          if ((i3)/=0) then
            write(*,*)MYRANK,':',
     .        'main: error calling mpi_com_create for Z',i,j
            call abort
          endif
        enddo
      enddo
      do i=1,NRPROCX
        do k=1,NRPROCZ
          call mpi_comm_create(MPI_COMM_WORLD,GROUPY(i,k),
     .       comm_myrank_local,i3)
          COMMYALL(i,k)=comm_myrank_local
          if ((i3)/=0) then
            write(*,*)MYRANK,':',
     .        'main: error calling mpi_com_create for Y',i,k
            call abort
          endif
        enddo
      enddo
      do j=1,NRPROCY
        do k=1,NRPROCZ
          call mpi_comm_create(MPI_COMM_WORLD,GROUPX(j,k),
     .       comm_myrank_local,i3)
          COMMXALL(j,k)=comm_myrank_local
          if ((i3)/=0) then
            write(*,*)MYRANK,':',
     .        'main: error calling mpi_com_create for X',j,k
            call abort
          endif
        enddo
      enddo
      if(iprint.eq.1)then
        do i=1,NRPROCX
          do j=1,NRPROCY
            write(*,*)PRINTRANK,'COMMZALL(',i,j,')',COMMZALL(i,j)
          enddo     
        enddo
        do i=1,NRPROCX
          do k=1,NRPROCZ
            write(*,*)PRINTRANK,'COMMYALL(',i,k,')',COMMYALL(i,k)
          enddo     
        enddo
        do j=1,NRPROCY
          do k=1,NRPROCZ
            write(*,*)PRINTRANK,'COMMXALL(',j,k,')',COMMXALL(j,k)
          enddo     
        enddo
      endif      
      call mpi_barrier(MPI_COMM_WORLD,ierr)
c ....extract local communicators
      COMMX = COMMXALL(myranky+1,myrankz+1)
      COMMY = COMMYALL(myrankx+1,myrankz+1)
      COMMZ = COMMZALL(myrankx+1,myranky+1)
      write(*,*)PRINTRANK,'COMMX(Y,Z)',COMMX,COMMY,COMMZ
      end
